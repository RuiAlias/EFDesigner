//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
//
//     Produced by Entity Framework Visual Editor
//     https://github.com/msawczyn/EFDesigner
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace Sandbox_EFCore
{
   /// <inheritdoc/>
   public partial class EFModel : Microsoft.EntityFrameworkCore.DbContext
   {
      #region DbSets
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::Sandbox_EFCore.PressRelease> PressReleases { get; set; }
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::Sandbox_EFCore.PressReleaseDetail> PressReleaseDetails { get; set; }
      #endregion DbSets

      /// <summary>
      /// Default connection string
      /// </summary>
      public static string ConnectionString { get; set; } = @"Data Source=.\sqlexpress;Initial Catalog=N2N;Integrated Security=True";

      /// <inheritdoc />
      public EFModel(DbContextOptions<EFModel> options) : base(options)
      {
      }

      partial void CustomInit(DbContextOptionsBuilder optionsBuilder);

      /// <inheritdoc />
      protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
      {
         CustomInit(optionsBuilder);
      }

      partial void OnModelCreatingImpl(ModelBuilder modelBuilder);
      partial void OnModelCreatedImpl(ModelBuilder modelBuilder);

      /// <inheritdoc />
      protected override void OnModelCreating(ModelBuilder modelBuilder)
      {
         base.OnModelCreating(modelBuilder);
         OnModelCreatingImpl(modelBuilder);

         modelBuilder.HasDefaultSchema("dbo");

         modelBuilder.Entity<global::Sandbox_EFCore.PressRelease>().ToTable("PressReleases").HasKey(t => t.Id);
         modelBuilder.Entity<global::Sandbox_EFCore.PressRelease>().Property(t => t.Id).IsRequired().ValueGeneratedOnAdd();
         modelBuilder.Entity<global::Sandbox_EFCore.PressRelease>().Ignore(x => x.PressReleaseDetails);

         modelBuilder.Entity<global::Sandbox_EFCore.PressRelease_PressReleaseDetails_x_PressRelease>().ToTable("PressRelease_PressReleaseDetails_x_PressRelease").HasKey(t => new { t.LHS_Id, t.RHS_Id });
         modelBuilder.Entity<global::Sandbox_EFCore.PressRelease_PressReleaseDetails_x_PressRelease>().HasOne(x => x.LHS).WithMany().HasForeignKey(x => x.LHS_Id).IsRequired();
         modelBuilder.Entity<global::Sandbox_EFCore.PressRelease_PressReleaseDetails_x_PressRelease>().HasOne(x => x.RHS).WithMany().HasForeignKey(x => x.RHS_Id).IsRequired();
         modelBuilder.Entity<global::Sandbox_EFCore.PressRelease>().Ignore(x => x.PressReleaseDetailHistory);
         modelBuilder.Entity<global::Sandbox_EFCore.PressReleaseDetail>().Ignore(x => x.PressReleases);

         modelBuilder.Entity<global::Sandbox_EFCore.PressRelease_PressReleaseDetailHistory_x_PressReleaseDetail_PressReleases>().ToTable("PressRelease_PressReleaseDetailHistory_x_PressReleaseDetail_PressReleases").HasKey(t => new { t.LHS_Id, t.RHS_Id });
         modelBuilder.Entity<global::Sandbox_EFCore.PressRelease_PressReleaseDetailHistory_x_PressReleaseDetail_PressReleases>().HasOne(x => x.LHS).WithMany().HasForeignKey(x => x.LHS_Id).IsRequired();
         modelBuilder.Entity<global::Sandbox_EFCore.PressRelease_PressReleaseDetailHistory_x_PressReleaseDetail_PressReleases>().HasOne(x => x.RHS).WithMany().HasForeignKey(x => x.RHS_Id).IsRequired();

         modelBuilder.Entity<global::Sandbox_EFCore.PressReleaseDetail>().ToTable("PressReleaseDetails").HasKey(t => t.Id);
         modelBuilder.Entity<global::Sandbox_EFCore.PressReleaseDetail>().Property(t => t.Id).IsRequired().ValueGeneratedOnAdd();

         OnModelCreatedImpl(modelBuilder);
      }
   }
}
