//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
//
//     Produced by Entity Framework Visual Editor
//     https://github.com/msawczyn/EFDesigner
// </auto-generated>
//------------------------------------------------------------------------------

// Based on the work done at https://github.com/ZBAGI/EntityFramework-ManyToMany/tree/master/EntityFramework-ManyToMany/Relationship
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;

namespace Sandbox_EFCore
{
   public interface IJoin<TEntity>
   {
      TEntity Navigation { get; set; }
   }

   public class NavigationProperty<TOwner, TEntity, TJoin> 
      : ICollection<TEntity> where TJoin : IJoin<TEntity>, IJoin<TOwner>, new()
   {
      private readonly TOwner OwnerEntity;
      private ICollection<TJoin> Collection;

      public NavigationProperty(TOwner ownerEntity)
      {
         OwnerEntity = ownerEntity;
      }

      /// <summary>Returns an enumerator that iterates through the collection.</summary>
      /// <returns>An enumerator that can be used to iterate through the collection.</returns>
      public IEnumerator<TEntity> GetEnumerator()
      {
         return GetCollection().Select(e => ((IJoin<TEntity>)e).Navigation).GetEnumerator();
      }

      /// <summary>Returns an enumerator that iterates through a collection.</summary>
      /// <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
      IEnumerator IEnumerable.GetEnumerator()
      {
         return GetEnumerator();
      }

      /// <summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      /// <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      /// <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</exception>
      public void Add(TEntity item)
      {
         if (!Contains(item))
         {
            TJoin entity = new TJoin();
            ((IJoin<TEntity>)entity).Navigation = item;
            ((IJoin<TOwner>)entity).Navigation = OwnerEntity;
            GetCollection().Add(entity);
         }
      }

      /// <summary>Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      /// <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only. </exception>
      public void Clear()
      {
         GetCollection().Clear();
      }

      /// <summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.</summary>
      /// <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      /// <returns>
      /// <see langword="true" /> if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, <see langword="false" />.</returns>
      public bool Contains(TEntity item)
      {
         return GetCollection().Any(e => Equals(item, e));
      }

      /// <summary>Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</summary>
      /// <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      /// <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
      /// <exception cref="T:System.ArgumentNullException">
      /// <paramref name="array" /> is <see langword="null" />.</exception>
      /// <exception cref="T:System.ArgumentOutOfRangeException">
      /// <paramref name="arrayIndex" /> is less than 0.</exception>
      /// <exception cref="T:System.ArgumentException">The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.</exception>
      public void CopyTo(TEntity[] array, int arrayIndex)
      {
         if (array == null) throw new ArgumentNullException(nameof(array));
         if (arrayIndex < 0) throw new ArgumentOutOfRangeException(nameof(arrayIndex));
         if (Count > array.Length - arrayIndex) throw new ArgumentException("The number of elements in the source ICollection is greater than the available space from arrayIndex to the end of the destination array");
         this.ToList().CopyTo(array, arrayIndex);
      }

      /// <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      /// <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      /// <returns>
      /// <see langword="true" /> if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, <see langword="false" />. This method also returns <see langword="false" /> if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
      /// <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</exception>
      public bool Remove(TEntity item)
      {
         return GetCollection().Remove(GetCollection().FirstOrDefault(e => Equals(item, e)));
      }

      /// <summary>Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      /// <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
      public int Count
      {
         get { return GetCollection().Count; }
      }

      /// <summary>Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</summary>
      /// <returns>
      /// <see langword="true" /> if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, <see langword="false" />.</returns>
      public bool IsReadOnly
      {
         get { return GetCollection().IsReadOnly; }
      }

      private static bool Equals(TEntity item, TJoin e)
      {
         return Equals(((IJoin<TEntity>)e).Navigation, item);
      }

      private ICollection<TJoin> GetCollection()
      {
         if (Collection == null)
            Collection = typeof(TOwner).GetProperties()
                                       .SingleOrDefault(p => p.PropertyType == typeof(ICollection<TJoin>))
                                      ?.GetValue(OwnerEntity, null) as ICollection<TJoin>;

         if (Collection == null)
            throw new NullReferenceException($"Missing ICollection<{typeof(TJoin).FullName}> in entity type {typeof(TOwner).FullName} or collection haven't been initalized.");

         return Collection;
      }
   }
}
