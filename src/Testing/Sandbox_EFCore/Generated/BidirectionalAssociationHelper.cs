//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
//
//     Produced by Entity Framework Visual Editor
//     https://github.com/msawczyn/EFDesigner
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;

namespace Sandbox_EFCore
{
   public interface IJoin<L,R> where L: class
                               where R: class
   {
      L LHS { get; set; }
      R RHS { get; set; }
   }

   /// <summary>
   /// Implements bidirectional association
   /// </summary>
   /// <typeparam name="T">Types contained by this collection</typeparam>
   /// <typeparam name="L">First type listed in IJoin&lt;L,R&gt;</typeparam>
   /// <typeparam name="R">Second type listed in IJoin&lt;L,R&gt;</typeparam>
   /// <typeparam name="J">Join object</typeparam>
   public class NavigationProperty<T,L,R,J> : ICollection<T> where J : IJoin<L,R>, new() 
                                                             where L : class
                                                             where R : class
                                                             where T : class
   {
      private readonly ICollection<J> Joins;
      private readonly L OwnerL;
      private readonly R OwnerR;
      private readonly bool IsLCollection;

      public NavigationProperty(L owner, ICollection<J> joins)
      {
         Joins = joins;
         OwnerL = owner;
         IsLCollection = typeof(T) == typeof(L);
      }

      public NavigationProperty(R owner, ICollection<J> joins)
      {
         Joins = joins;
         OwnerR = owner;
         IsLCollection = typeof(T) == typeof(L);
      }

      private ICollection<T> Entities
      {
         get
         {
            if (!Joins.Any()) return new List<T>();

            return IsLCollection
                      ? Joins.Select(x => x.LHS).Cast<T>().ToList()
                      : Joins.Select(x => x.RHS).Cast<T>().ToList();
         }
      }

      /// <summary>Returns an enumerator that iterates through the collection.</summary>
      /// <returns>An enumerator that can be used to iterate through the collection.</returns>
      public IEnumerator<T> GetEnumerator()
      {
         return Entities.GetEnumerator();
      }

      /// <summary>Returns an enumerator that iterates through a collection.</summary>
      /// <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
      IEnumerator IEnumerable.GetEnumerator()
      {
         return GetEnumerator();
      }

      /// <summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      /// <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      /// <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</exception>
      public void Add(T item)
      {
         if (Entities.All(obj => obj != item))
         {
            Joins.Add(IsLCollection
                         ? new J {RHS = OwnerR, LHS = item as L}
                         : new J {LHS = OwnerL, RHS = item as R});
         }
      }

      /// <summary>Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      /// <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only. </exception>
      public void Clear()
      {
         Joins.Clear();
      }

      /// <summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.</summary>
      /// <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      /// <returns>
      /// <see langword="true" /> if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, <see langword="false" />.</returns>
      public bool Contains(T item)
      {
         return Entities.Any(x => x == item);
      }

      /// <summary>Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</summary>
      /// <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      /// <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
      /// <exception cref="T:System.ArgumentNullException">
      /// <paramref name="array" /> is <see langword="null" />.</exception>
      /// <exception cref="T:System.ArgumentOutOfRangeException">
      /// <paramref name="arrayIndex" /> is less than 0.</exception>
      /// <exception cref="T:System.ArgumentException">The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.</exception>
      public void CopyTo(T[] array, int arrayIndex)
      {
         if (array == null) throw new ArgumentNullException(nameof(array));
         if (arrayIndex < 0) throw new ArgumentOutOfRangeException(nameof(arrayIndex));
         if (Entities.Count > array.Length - arrayIndex) throw new ArgumentException("The number of elements in the source ICollection is greater than the available space from arrayIndex to the end of the destination array");

         int index = arrayIndex;
         foreach (T obj in Entities) array[index++] = obj;
      }

      /// <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      /// <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      /// <returns>
      /// <see langword="true" /> if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, <see langword="false" />. This method also returns <see langword="false" /> if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
      /// <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</exception>
      public bool Remove(T item)
      {
         return Joins.Remove(Joins.Single(x => (IsLCollection ? x.LHS as T : x.RHS as T) == item));
      }

      /// <summary>Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      /// <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
      public int Count => Joins.Count;

      /// <summary>Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</summary>
      /// <returns>
      /// <see langword="true" /> if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, <see langword="false" />.</returns>
      public bool IsReadOnly => false;
   }
}
